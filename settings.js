document.addEventListener('DOMContentLoaded', () => {
    // Carregar configura√ß√µes salvas
    loadSettings();

    // Configurar eventos dos bot√µes
    setupEventListeners();
});

/**
 * Carrega as configura√ß√µes do sistema.
 * Funciona tanto no GitHub Pages quanto em um ambiente com backend.
 * 
 * - Se o site estiver rodando no GitHub Pages, carrega do localStorage.
 * - Se o site estiver rodando em um servidor backend, busca via API `/api/settings`.
 * - Se a API falhar, aplica configura√ß√µes padr√£o para evitar falhas no sistema.
 */
function loadSettings() {
    const isGitHubPages = window.location.hostname.includes("github.io") || window.location.hostname.includes("githubusercontent.com"); 

    if (isGitHubPages) {
        // üü¢ GitHub Pages: Carrega configura√ß√µes do localStorage (pois n√£o h√° backend dispon√≠vel)
        const savedSettings = localStorage.getItem('aquaponia-settings');
        if (savedSettings) {
            applySettings(JSON.parse(savedSettings)); // Aplica configura√ß√µes salvas no navegador
        } else {
            applyDefaultSettings(); // Aplica configura√ß√µes padr√£o se n√£o houver nada salvo
        }
    } else {
        // üîµ Ambiente com backend: Busca configura√ß√µes via API
        fetch('/api/settings')
            .then(response => {
                if (!response.ok) throw new Error(`Erro ${response.status}: ${response.statusText}`); // Verifica erros HTTP
                return response.json(); // Converte a resposta para JSON
            })
            .then(settings => {
                applySettings(settings); // Aplica as configura√ß√µes recebidas do backend
                localStorage.setItem('aquaponia-settings', JSON.stringify(settings)); // Salva no localStorage para acesso offline
            })
            .catch(error => {
                console.warn('‚ö†Ô∏è Backend n√£o dispon√≠vel. Tentando carregar do localStorage.', error);
                
                const savedSettings = localStorage.getItem('aquaponia-settings');
                if (savedSettings) {
                    console.log("üì¶ Carregando configura√ß√µes salvas no navegador.");
                    applySettings(JSON.parse(savedSettings));
                } else {
                    console.log("‚öôÔ∏è Aplicando configura√ß√µes padr√£o.");
                    applyDefaultSettings(); // Se a API falhar e n√£o houver nada salvo, usa padr√£o
                }
            });
    }
}


// Aplicar configura√ß√µes aos campos
function applySettings(settings) {
    // Sistema
    document.getElementById('system-name').value = settings.systemName || 'Aquaponia';
    document.getElementById('update-interval').value = settings.updateInterval || 1;
    document.getElementById('data-retention').value = settings.dataRetention || 30;

    // Alertas
    document.getElementById('email-alerts').checked = settings.emailAlerts ?? true;
    document.getElementById('push-alerts').checked = settings.pushAlerts ?? true;
    document.getElementById('alert-email').value = settings.alertEmail || '';

    // Limites de Temperatura
    document.getElementById('temp-critical-min').value = settings.temperature?.criticalMin || 18;
    document.getElementById('temp-warning-min').value = settings.temperature?.warningMin || 20;
    document.getElementById('temp-warning-max').value = settings.temperature?.warningMax || 28;
    document.getElementById('temp-critical-max').value = settings.temperature?.criticalMax || 30;

    // Limites de N√≠vel
    document.getElementById('level-critical-min').value = settings.level?.criticalMin || 50;
    document.getElementById('level-warning-min').value = settings.level?.warningMin || 60;
    document.getElementById('level-warning-max').value = settings.level?.warningMax || 85;
    document.getElementById('level-critical-max').value = settings.level?.criticalMax || 90;

    // Automa√ß√£o da Bomba
    document.getElementById('pump-auto').checked = settings.pump?.auto ?? true;
    document.getElementById('pump-on-time').value = settings.pump?.onTime || '06:00';
    document.getElementById('pump-off-time').value = settings.pump?.offTime || '18:00';

    // Automa√ß√£o do Aquecedor
    document.getElementById('heater-auto').checked = settings.heater?.auto ?? true;
    document.getElementById('heater-on-temp').value = settings.heater?.onTemp || 22;
    document.getElementById('heater-off-temp').value = settings.heater?.offTemp || 24;
}

// Configura√ß√µes padr√£o
function applyDefaultSettings() {
    const defaultSettings = {
        systemName: 'Aquaponia',
        updateInterval: 1,
        dataRetention: 30,
        emailAlerts: true,
        pushAlerts: true,
        alertEmail: '',
        temperature: {
            criticalMin: 18,
            warningMin: 20,
            warningMax: 28,
            criticalMax: 30
        },
        level: {
            criticalMin: 50,
            warningMin: 60,
            warningMax: 85,
            criticalMax: 90
        },
        pump: {
            auto: true,
            onTime: '06:00',
            offTime: '18:00'
        },
        heater: {
            auto: true,
            onTemp: 22,
            offTemp: 24
        }
    };

    applySettings(defaultSettings);
}

// Configurar event listeners corretamente
function setupEventListeners() {
    // Bot√£o Salvar
    document.getElementById('save-settings').addEventListener('click', () => {
        saveSettings();
    });

    // Bot√£o Restaurar Padr√µes
    document.getElementById('reset-settings').addEventListener('click', () => {
        if (confirm('Deseja restaurar todas as configura√ß√µes para os valores padr√£o?')) {
            applyDefaultSettings();
            saveSettings(); // Salva os valores padr√£o
        }
    });
}

// ‚úÖ Fun√ß√£o para salvar configura√ß√µes no localStorage
function saveSettings() {
    const settings = collectSettings();
    try {
        localStorage.setItem('aquaponia-settings', JSON.stringify(settings)); // Salva no navegador
        alert('Configura√ß√µes salvas com sucesso!');
    } catch (error) {
        console.error('Erro ao salvar configura√ß√µes:', error);
        alert('Erro ao salvar configura√ß√µes. Por favor, tente novamente.');
    }
}

// ‚úÖ Chamar a fun√ß√£o de carregar configura√ß√µes ao iniciar
document.addEventListener('DOMContentLoaded', () => {
    loadSettings();
    setupEventListeners();

    // Valida√ß√µes em tempo real
    setupValidations();
});

// Coletar configura√ß√µes dos campos
function collectSettings() {
    return {
        systemName: document.getElementById('system-name').value,
        updateInterval: parseInt(document.getElementById('update-interval').value),
        dataRetention: parseInt(document.getElementById('data-retention').value),
        emailAlerts: document.getElementById('email-alerts').checked,
        pushAlerts: document.getElementById('push-alerts').checked,
        alertEmail: document.getElementById('alert-email').value,
        temperature: {
            criticalMin: parseFloat(document.getElementById('temp-critical-min').value),
            warningMin: parseFloat(document.getElementById('temp-warning-min').value),
            warningMax: parseFloat(document.getElementById('temp-warning-max').value),
            criticalMax: parseFloat(document.getElementById('temp-critical-max').value)
        },
        level: {
            criticalMin: parseInt(document.getElementById('level-critical-min').value),
            warningMin: parseInt(document.getElementById('level-warning-min').value),
            warningMax: parseInt(document.getElementById('level-warning-max').value),
            criticalMax: parseInt(document.getElementById('level-critical-max').value)
        },
        pump: {
            auto: document.getElementById('pump-auto').checked,
            onTime: document.getElementById('pump-on-time').value,
            offTime: document.getElementById('pump-off-time').value
        },
        heater: {
            auto: document.getElementById('heater-auto').checked,
            onTemp: parseFloat(document.getElementById('heater-on-temp').value),
            offTemp: parseFloat(document.getElementById('heater-off-temp').value)
        }
    };
}

// Configurar valida√ß√µes
function setupValidations() {
    // Valida√ß√£o de temperatura
    const tempInputs = [
        'temp-critical-min',
        'temp-warning-min',
        'temp-warning-max',
        'temp-critical-max'
    ];

    tempInputs.forEach(id => {
        document.getElementById(id).addEventListener('change', validateTemperatureRanges);
    });

    // Valida√ß√£o de n√≠vel
    const levelInputs = [
        'level-critical-min',
        'level-warning-min',
        'level-warning-max',
        'level-critical-max'
    ];

    levelInputs.forEach(id => {
        document.getElementById(id).addEventListener('change', validateLevelRanges);
    });

    // Valida√ß√£o de hor√°rios da bomba
    document.getElementById('pump-on-time').addEventListener('change', validatePumpTimes);
    document.getElementById('pump-off-time').addEventListener('change', validatePumpTimes);

    // Valida√ß√£o de temperaturas do aquecedor
    document.getElementById('heater-on-temp').addEventListener('change', validateHeaterTemps);
    document.getElementById('heater-off-temp').addEventListener('change', validateHeaterTemps);
}

// Fun√ß√µes de valida√ß√£o
function validateTemperatureRanges() {
    const criticalMin = parseFloat(document.getElementById('temp-critical-min').value);
    const warningMin = parseFloat(document.getElementById('temp-warning-min').value);
    const warningMax = parseFloat(document.getElementById('temp-warning-max').value);
    const criticalMax = parseFloat(document.getElementById('temp-critical-max').value);

    if (criticalMin >= warningMin || 
        warningMin >= warningMax || 
        warningMax >= criticalMax) {
        alert('Os limites de temperatura devem seguir a ordem: Cr√≠tico M√≠n < Alerta M√≠n < Alerta M√°x < Cr√≠tico M√°x');
        applyDefaultSettings();
    }
}

function validateLevelRanges() {
    const criticalMin = parseInt(document.getElementById('level-critical-min').value);
    const warningMin = parseInt(document.getElementById('level-warning-min').value);
    const warningMax = parseInt(document.getElementById('level-warning-max').value);
    const criticalMax = parseInt(document.getElementById('level-critical-max').value);

    if (criticalMin >= warningMin || 
        warningMin >= warningMax || 
        warningMax >= criticalMax) {
        alert('Os limites de n√≠vel devem seguir a ordem: Cr√≠tico M√≠n < Alerta M√≠n < Alerta M√°x < Cr√≠tico M√°x');
        applyDefaultSettings();
    }
}

function validatePumpTimes() {
    const onTime = document.getElementById('pump-on-time').value;
    const offTime = document.getElementById('pump-off-time').value;

    if (onTime >= offTime) {
        alert('O hor√°rio de ligar deve ser anterior ao hor√°rio de desligar');
        document.getElementById('pump-on-time').value = '06:00';
        document.getElementById('pump-off-time').value = '18:00';
    }
}

function validateHeaterTemps() {
    const onTemp = parseFloat(document.getElementById('heater-on-temp').value);
    const offTemp = parseFloat(document.getElementById('heater-off-temp').value);

    if (onTemp >= offTemp) {
        alert('A temperatura para ligar deve ser menor que a temperatura para desligar');
        document.getElementById('heater-on-temp').value = '22';
        document.getElementById('heater-off-temp').value = '24';
    }
}